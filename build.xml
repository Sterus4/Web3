<project name="lab3" default="all">
    <!-- Параметры -->
    <property file="build.properties"/>

    <!-- Пути до файлов-->
    <path id="dependencies">
        <fileset  dir="${dir.dependencies}">
            <include name="**/*.jar" />
        </fileset>
    </path>

    <!-- Цель на все-->
    <target name="all" depends="build.war, create.meta, doc"/>
    
    <!-- Цель на создание манифеста-->
    <target name="create.meta" depends="create.dir">
        <manifest file="${dir.meta}/${file.manifest}">
            <attribute name="Built-By" value="${user.name}"/>
            <attribute name="Project-version" value="${project.version}"/>
        </manifest>
    </target>

    <!-- Цель создать нужные директории-->
    <target name="create.dir">
        <mkdir dir="${dir.class}"/>
        <mkdir dir="${dir.war.content}"/>
        <mkdir dir="${dir.meta}"/>
        <mkdir dir="${dir.docs}"/>
    </target>
    
    <!-- Цель Компиляции исходных java файлов-->
    <target name="compile" depends="create.dir">
        <javac srcdir="${dir.src.java}" destdir="${dir.class}">
            <classpath refid="dependencies"/>
        </javac>
        <copy todir="${dir.class}">
            <fileset dir="${dir.src.res}"/>
        </copy>
    </target>

    <!-- Цель сборки jar файла-->
    <target name="build.jar" depends="compile">
        <jar destfile="${file.jar}"
            basedir="${dir.class}"
            index="true">
        </jar>
    </target>

    <!-- Цель сборки war файла-->
    <target name="build.war.target" depends="build.jar">
        <copy todir="${dir.war.content}" overwrite="true" preservelastmodified="true">
            <fileset dir="${dir.src.webapp}"/>
        </copy>
        <copy todir="${dir.war.lib}" preservelastmodified="true">
            <fileset dir="${dir.dependencies}"/>
        </copy>
        <copy todir="${dir.war.lib}" preservelastmodified="true"
              file="${file.jar}"/>
    </target>

    <target name="build.war" depends="build.war.target">
        <delete file="${file.war}"/>
        <war encoding="utf-8" warfile="${file.war}" webxml="${file.webxml}">
            <fileset dir="${dir.war.content}"/>
        </war>
    </target>
    <!-- Тестирование-->
    <target name="compile.tests" depends="build.war">
        <mkdir dir="${dir.bin}"/>
        <javac srcdir="${dir.src.test}" destdir="${dir.bin}" includeantruntime="false">
            <classpath>
                <path refid="dependencies"/>
                <pathelement location="${dir.bin}"/>
                <pathelement location="${dir.class}"/>
            </classpath>
        </javac>
    </target>

    <target name="test" depends="compile.tests">
        <mkdir dir="${dir.test.output}"/>
        <junitlauncher printsummary="on" haltonfailure="yes">
            <classpath>
                <path refid="dependencies"/>
                <pathelement location="${dir.bin}"/>
                <pathelement location="${dir.class}"/>
            </classpath>
            <testclasses outputdir="${dir.test.output}">
                <fileset dir="${dir.bin}" includes="**/*.class"/>
                <listener type="legacy-brief" sendSysOut="true"/>
                <listener type="legacy-xml" sendSysErr="true" sendSysOut="true"/>
            </testclasses>
        </junitlauncher>
    </target>

    <!-- Создание документации-->
    <target name="doc" depends="create.meta, build.war">
        <checksum property="hash.md5" algorithm="MD5" file="${file.war}"/>
        <checksum property="hash.sha1" algorithm="SHA-1" file="${file.war}"/>

        <manifest file="${dir.meta}/${file.manifest}" mode="update">
            <section name="documentation">
                <attribute name="Project-MD5" value="${hash.md5}"/>
                <attribute name="Project-SHA-1" value="${hash.sha1}"/>
            </section>
        </manifest>

        <javadoc sourcepath="${dir.src.java}" destdir="docs">
            <classpath refid="dependencies"/>
        </javadoc>

        <jar destfile="${docs.jar}"
            basedir="${dir.docs}"/>
    </target>
    <!-- Цель получения последних двух ревизий из гита-->
    <target name="team">
        <exec executable="git">
            <arg value="stash"/>
            <arg value="push"/>
            <arg value="--"/>
            <arg value="src/main/java"/>
        </exec>
        <exec executable="git">
            <arg value="checkout"/>
            <arg value="HEAD~1"/>
            <arg value="--"/>
            <arg value="src/main/java"/>
        </exec>
        <antcall target="build.jar">
            <param name="file.jar" value="${file.jar.HEAD1}"/>
        </antcall>
        <exec executable="git">
            <arg value="checkout"/>
            <arg value="HEAD~2"/>
            <arg value="--"/>
            <arg value="src/main/java"/>
        </exec>
        <antcall target="build.jar">
            <param name="file.jar" value="${file.jar.HEAD2}"/>
        </antcall>
        <exec executable="git">
            <arg value="checkout"/>
            <arg value="HEAD"/>
            <arg value="--"/>
            <arg value="src/main/java"/>
        </exec>
        <exec executable="git">
            <arg value="stash"/>
            <arg value="pop"/>
        </exec>
        <zip destfile="${revisions.zip}">
            <fileset dir="." includes="${file.jar.HEAD1}, ${file.jar.HEAD2}"/>
        </zip>
    </target>
    <!-- Цель очистка от ненужного-->
    <target name="clean">
        <delete includeemptydirs="true">
            <fileset dir="${dir.build}" includes="**/*" excludes="${file.name}.jar,${file.name}.war"/>
            <fileset dir="${dir.docs}" includes="**/*"/>
        </delete>
    </target>
</project>